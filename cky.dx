

' CKY Algorithm

length = 10 
Label = Fin 20
Word = Fin 10

def Chart:Type = (i:Word =>(i<..)=> Float)
def index (ref:Ref h Chart) (i:Word) : Ref h ((i<..)=>Float) =
  %indexRef ref i

def rbound (i: Word) ?-> (j: Word) ?-> (x:(i<..<j)) : (i<..) =
       (ordinal x) @ (i<..)

def shift (i: Word) ?-> (j: Word) ?-> (x:(i<..))  : (j<..) =
    ((ordinal x) - ((ordinal j) - (ordinal i)))@(j<..)

def cky (weights : i:Word => (i<..) => Float) : (Float & Chart) =

    start = 0@Word
    last = (length - 1) @Word
    c_init : Chart = for i. for j. 0.0
    out = withState c_init $ \ c.
      -- Initialize (i, i+1) as 1
      for_ i':(..<last).
           i = %inject i'
           (index c i)!(0@(i<..)) := 1.0

      -- d is span
      for_ d : (start<..).
       d' = ordinal (%inject d)
       boundary = (length - d' - 1)@Word
       for_ i' : (..<boundary).
          -- Enumerate (i, j)
          i = %inject i'
          j' = d'@(i<..)
          j = %inject j'
          
          -- Fill (i, j)
          (index c i)!j' := 
                 sum for k' : (i<..<j).
                          -- Get (i, k)
                          k : (i<..) = rbound k'
                          left = get ((index c i)!k)

                          -- Get (k, j)
                          k2 : Word =  %inject k
                          j2 : (k2<..) = shift j'
                          right = get ((index c k2)!j2)

                          -- Mult
                          left * right * weights.i.j'
                          
      get (index c start)!((length-2)@(start<..))
    out

key =  (newKey 0)
param : i:Word => (i<..)  => Float = for i. for j. rand (ixkey2 key i j)
cky param


